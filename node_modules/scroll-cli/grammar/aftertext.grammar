tooling
 Related work
 CSS is great for text selector ideas: https://www.w3schools.com/cssref/css_selectors.asp
 Roff has a lot of related markup ideas: https://www.systutorials.com/docs/linux/man/7-groff_man/
aftertextTextNode
 catchAllCellType stringCell
 boolean isTextNode true
abstractAftertextNode
 description Text followed by markup commands.
 extends abstractScrollNode
 catchAllNodeType aftertextTextNode
 inScope abstractAftertextDirectiveNode abstractAftertextAttributeNode
 example
  aftertext
   Hello brave new world
   link home.com new
   bold brave new
   underline new world
   strikethrough wor
 javascript
  get markupInserts() {
   const { originalTextPostLinkify } = this
   return this.filter(node => node.isMarkupNode)
    .map(node => node.getInserts(originalTextPostLinkify))
    .filter(i => i)
    .flat()
  }
  get originalTextPostLinkify() {
    const originalText = this.filter(node => node.isTextNode)
    .map(node => node.toString())
    .join("\n")
    const shouldLinkify = originalText.includes("<a ") ? false : true
    return shouldLinkify ? jtree.Utils.linkify(originalText) : originalText
  }
  get text() {
   const { originalTextPostLinkify, markupInserts } = this
   let adjustment = 0
   let newText = originalTextPostLinkify
   // If multiple tags start at same index, the tag that closes first should start last. Otherwise HTML breaks.
   markupInserts.sort((a, b) => (a.index === b.index ? b.endIndex - a.endIndex : a.index - b.index))
   markupInserts.forEach(insertion => {
    insertion.index += adjustment
    const consumeStartCharacters = insertion.consumeStartCharacters ?? 0
    const consumeEndCharacters = insertion.consumeEndCharacters ?? 0
    newText = newText.slice(0, insertion.index - consumeEndCharacters) + insertion.string + newText.slice(insertion.index + consumeStartCharacters)
    adjustment += insertion.string.length - consumeEndCharacters - consumeStartCharacters
   })
   return newText
  }
  tag = "p"
  className = "scrollParagraphComponent"
  compile() {
   return `<${this.tag} ${this.divAttributes}class="${this.className}">${this.text}</${this.tag}>`
  }
  get divAttributes() {
   const attrs = this.filter(node => node.isAttributeNode)
   return attrs.length ? attrs.map(node => node.divAttributes).join(" ") + " " : ""
  }
abstractAftertextAttributeNode
 cells keywordCell
 boolean isAttributeNode true
 javascript
  get divAttributes() {
   return `${this.getWord(0)}="${this.getContent()}"`
  }
  compile() {
   return ""
  }
abstractAftertextDirectiveNode
 cells keywordCell
 catchAllCellType stringCell
 javascript
  isMarkupNode = true
  get pattern() {
   return this.getWordsFrom(1).join(" ")
  }
  get shouldMatchAll() {
   return this.has("matchAll")
  }
  getMatches(text) {
   const { pattern } = this
   const escapedPattern = pattern.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
   return [...text.matchAll(new RegExp(escapedPattern, "g"))].map(match => {
    const { index } = match
    const endIndex = index + pattern.length
    return [{ index, string: `<${this.openTag}${this.allAttributes}>`, endIndex }, { index: endIndex, endIndex, string: `</${this.closeTag}>` }]
   })
  }
  getInserts(text) {
   const matches = this.getMatches(text)
   if (!matches.length) return false
   if (this.shouldMatchAll) return matches.flat()
   const indexNode = this.getNode("match")
   if (indexNode)
    return indexNode.indexes
     .map(index => matches[index])
     .filter(i => i)
     .flat()
   return matches[0]
  }
  get allAttributes() {
   const attr = this.attributes.join(" ")
   return attr ? " " + attr : ""
  }
  get attributes() {
   return []
  }
  get openTag() {
   return this.tag
  }
  get closeTag() {
   return this.tag
  }
abstractMarkupNode
 extends abstractAftertextDirectiveNode
 inScope abstractMarkupParameterNode
abstractMarkupParameterNode
 cells keywordCell
 cruxFromId
matchAllNode
 description Use this to match all occurrences of the text.
 extends abstractMarkupParameterNode
matchNode
 catchAllCellType integerCell
 description Use this to specify which index(es) to match.
 javascript
  get indexes() {
   return this.getWordsFrom(1).map(num => parseInt(num))
  }
 example
  aftertext
   hello ello ello
   bold ello
    match 0 2
 extends abstractMarkupParameterNode
wrapsOnNode
 cruxFromId
 description Enable `code`, *bold*, and _italics_ rules.
 extends abstractAftertextDirectiveNode
 javascript
  get shouldMatchAll() {
   return true
  }
  getMatches(text) {
   return [this.runPattern(text, "`", "code"), this.runPattern(text, "*", "strong"), this.runPattern(text, "_", "em")].filter(i => i).flat()
  }
  runPattern(text, delimiter, tag, attributes = "") {
   const escapedDelimiter = delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
   const pattern = new RegExp(`${escapedDelimiter}[^${escapedDelimiter}]+${escapedDelimiter}`, "g")
   const delimiterLength = delimiter.length
   return [...text.matchAll(pattern)].map(match => {
    const { index } = match
    const endIndex = index + match[0].length
    return [{ index, string: `<${tag + (attributes ? " " + attributes : "")}>`, endIndex, consumeStartCharacters: delimiterLength }, { index: endIndex, endIndex, string: `</${tag}>`, consumeEndCharacters: delimiterLength }]
   })
  }
wrapNode
 cruxFromId
 cells keywordCell delimiterCell tagOrUrlCell
 catchAllCellType htmlAttributesCell
 extends wrapsOnNode
 description Define a custom wrap, for example "wrap _ em" would support: _italics_.
 javascript
  getMatches(text) {
   try {
    const delimiter = this.getWord(1)
    const tag = this.getWord(2)
    const attributes = this.getWordsFrom(3).join(" ")
    if (tag.startsWith("https:")) return this.runPattern(text, delimiter, "a", `href="${tag}"` + attributes)
    return this.runPattern(text, delimiter, tag, attributes)
   } catch (err) {
    console.error(err)
    return []
   }
   // Note: doubling up doesn't work because of the consumption characters.
  }
boldNode
 cruxFromId
 extends abstractMarkupNode
 javascript
  tag = "b"
italicsNode
 cruxFromId
 extends abstractMarkupNode
 javascript
  tag = "i"
underlineNode
 cruxFromId
 extends abstractMarkupNode
 javascript
  tag = "u"
aftertextCodeNode
 crux code
 extends abstractMarkupNode
 javascript
  tag = "code"
linkNoteNode
 description When you want to include more information than just the link to your reference.
 crux note
 cells keywordCell
 example
  aftertext
   This report showed the treatment had a big impact.
  https://example.com/report This report.
   note
    The average growth in the treatment group was 14.2x higher than the control group.
 baseNodeType blobNode
 javascript
  compile() {
   return ""
  }
linkNode
 extends abstractMarkupNode
 cells keywordCell urlCell
 inScope linkNoteNode
 cruxFromId
 javascript
  tag = "a"
  get link() {
   return this.getWord(1)
  }
  get attributes() {
   const attrs = [`href="${this.link}"`]
   const title = this.getNode("note")
   if (title) attrs.push(`title="${title.childrenToString().replace(/\n/g, " ")}"`)
   return attrs
  }
  patternStartsAtWord = 2
  get pattern() {
   // If no pattern is provided, make the *entire* line a link.
   const words = this.getWordsFrom(this.patternStartsAtWord)
   return words.length ? words.join(" ") : this.getParent().getContent()
  }
classMarkupNode
 description Add a span with a class name around matching text.
 extends abstractMarkupNode
 cells keywordCell classNameCell
 crux class
 javascript
  tag = "span"
  get className() {
   return this.getWord(1)
  }
  get attributes() {
   return [`class="${this.className}"`]
  }
  get pattern() {
   return this.getWordsFrom(2).join(" ")
  }
caveatNode
 description Add a caveat viewable on hover on matching text. When you want to be sure you've thoroughly addressed obvious concerns but ones that don't warrant to distract from the main argument of the text.
 cruxFromId
 extends classMarkupNode
 cells keywordCell
 javascript
  get pattern() {
   return this.getWordsFrom(1).join(" ")
  }
  get attributes() {
   return [`class="scrollCaveat"`, `title="${this.caveatText}"`]
  }
  get caveatText() {
   return this.childrenToString().replace(/\n/g, " ")
  }
footnoteNode
 todo Improve this
 description Provide a little more information to the interested reader, without diverting the main flow of the text.
 extends caveatNode
 crux footnote
thoughtNode
 todo Perhaps rewrite this from scratch and move out of aftertext.
 extends abstractAftertextNode
 catchAllCellType stringCell
 example
  * I had a _new_ thought.
 description A thought.
 crux *
 javascript
  compile() {
   // Hacky, I know.
   const newLine = this.prependLine(this.getContent())
   const newLine2 = this.appendLine("wrapsOn")
   const compiled = super.compile()
   newLine.destroy()
   newLine2.destroy()
   return compiled
  }
listAftertextNode
 extends thoughtNode
 example
  - I had a _new_ thought.
 description A list item.
 crux -
 javascript
  compile() {
   const index = this.getIndex()
   const parent = this.getParent()
   const isStartOfList =
    index === 0 ||
    !parent
     .nodeAt(index - 1)
     .getLine()
     .startsWith("- ")
   const isEndOfList =
    parent.length === index + 1 ||
    !parent
     .nodeAt(index + 1)
     .getLine()
     .startsWith("- ")
   const { listType } = this
   return (isStartOfList ? `<${listType}>` : "") + `<li>${super.compile()}</li>` + (isEndOfList ? `</${listType}>` : "")
  }
  get listType() {
   return "ul" // todo: in the future add support for ol
  }
questionAftertextNode
 description A question.
 extends thoughtNode
 crux ?
 javascript
  tag = "h4"
  className = "scrollQuestionComponent"
h3AftertextNode
 description Compiles to an h3 tag.
 extends thoughtNode
 crux #
 javascript
  tag = "h3"
  className = "scrollSectionComponent"
h4AftertextNode
 extends h3AftertextNode
 crux ##
 javascript
  tag = "h4"
emailLinkNode
 description A mailto link
 crux email
 extends linkNode
 javascript
  get attributes() {
   return [`href="mailto:${this.link}"`]
  }
quickLinkNode
 pattern ^https\:
 extends linkNode
 cells urlCell
 javascript
  get link() {
   return this.getWord(0)
  }
  patternStartsAtWord = 1
strikethroughNode
 cruxFromId
 extends abstractMarkupNode
 javascript
  tag = "s"
aftertextIdNode
 crux id
 description Provide an ID to be output in the generated HTML paragraph.
 extends abstractAftertextAttributeNode
 cells keywordCell htmlIdCell
 single
datelineNode
 cruxFromId
 description Gives your paragraph a dateline like "December 15, 2021 — The..."
 extends abstractAftertextDirectiveNode
 javascript
  getInserts() {
   let day =
    this.getContent() ||
    this.getParent()
     .getParent()
     .get("date")
   if (!day) return false
   try {
    const dayjs = require("dayjs")
    day = dayjs(day).format(`MMMM D, YYYY`)
   } catch (err) {
    console.error(err)
   }
   return [{ index: 0, string: `<span class="scrollDateComponent">${day} — </span>` }]
  }
loremIpsumNode
 extends abstractAftertextNode
 description Generate dummy text.
 cruxFromId
 catchAllCellType integerCell
 javascript
  get originalTextPostLinkify() {
   return `Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.`
  }
  compile() {
   return super.compile().repeat(this.getWord(1) ? parseInt(this.getWord(1)) : 1)
  }
dayjsNode
 description Advanced directive that evals some Javascript code in an environment including "dayjs".
 cruxFromId
 extends abstractAftertextDirectiveNode
 javascript
  getInserts() {
    const dayjs = require("dayjs")
    const days = eval(this.getContent())
    const index = this.getParent().originalTextPostLinkify.indexOf("days")
    return [{ index, string: `${days} ` }]
  }