title JTree: Tree Notation SDK for TypeScript & Javascript

import ciBadges.scroll

# Links

readingList
 https://treenotation.org Tree Notation Homepage
 https://jtree.treenotation.org/sandbox Tree Notation Sandbox
 https://jtree.treenotation.org/designer Tree Language Designer
 https://faq.treenotation.org Tree Notation FAQ
 https://treebase.treenotation.org TreeBase
 https://github.com/treenotation/jtree TypeScript Library
 https://reddit.com/r/treenotation Tree Notation Subreddit
 https://github.com/treenotation/ohayo Ohayo - A data science studio powered by Tree Notation
 https://jtree.treenotation.org/sandbox/test.html UnitTests
 https://jtree.treenotation.org/sandbox/perfTests.html PerfTests

? Who is this package built for?

* Jtree is for people who want to design Tree Languages, make Tree editing tools, use TreeBase, or use the Tree Component Web Framework.

* You can think of jtree as similar to the Java Development Kit, except for Tree Notation instead of Java.

? How do I build a new language?

* You can try the checklist.
 https://jtree.treenotation.org/languageChecklist.html checklist

# Grammar Files

* Jtree contains a Tree Language called "Grammar". You can write new Grammar files to define new languages. By creating a grammar file you get a parser, a type checker, syntax highlighting, autocomplete, a compiler, and virtual machine for executing your new language. Jtree also includes a simple web Tree Language Designer.
 https://jtree.treenotation.org/designer Designer

* To make your language do really interesting things, you'll want to write some code to extend your language nodes in another language that you know. Jtree lets you create new languages using just Tree Notation, Tree Notation + TypeScript, or Tree Notation + Javascript. Tree Notation and Tree Languages can be built with any language, however, not just TypeScript and Javascript. We are looking for volunteers to build libraries/sdks in other host languages.

# Using Jtree

## Quick start

- Open https://gitpod.io/#https://github.com/breck7/jtree
- Run:

code
 npm install -g ts-node
 npm install .
 npm run test

* Jtree currently includes around 10 compiled projects (aka "products") and more than a dozen Tree Languages.

# jtree base library for npm projects:

code
 const {jtree} = require("jtree")
 const tree = new jtree.TreeNode("hello world")
 console.log(tree.toString())

# jtree base library for the browser:

code
 <script src="https://jtree.treenotation.org/products/jtree.browser.js" />

## TreeBase

* Instructions coming soon.

## jtree "sandbox" web app for exploring base Tree Notation

code
 npm install .
 npm run kitchen
 open http://localhost:3333/

## jtree "Designer" web app for building new Tree Languages

code
 npm install .
 npm run kitchen
 open http://localhost:3333/designer

## TreeComponentFramework for building web apps

* (directions coming soon)

## Sample Languages

* More than 12 example Tree Languages for helping with various tasks

* See the "langs/" folder.

##  Build Tools

* If you look at the source, you will also see a set of build tools (such as Builder and TypeScriptRewriter). These are currently undocumented and not recommended for external use.

## Building all tools and running tests

code
 npm run build
 npm test

# Monorepo

* Jtree is a monorepo. With on average over 1 major version released each month for the past 2.5 years, it would take a lot of overhead to constantly be updating 10+ different repositories and modules every month. Once we're more confident in the theory and best practices, it might make sense to break this repo into independent modules.

* That being said, we despise unnecessary dependencies as much as anyone. If anyone wants to create some automated submodules built from the projects in this monorepo, to allow for consuming of a smaller subset of the code and dependencies in this module, feel free to do so.

## Visualization of the code base

image images/diagram.svg

# Development Status

* All breaking changes are mentioned in the releaseNotes. We follow semantic versioning, so breaking changes should not happen if you stay on the same major version.
 link releaseNotes.html releaseNotes

# Tree Notation Libraries in Other Languages

* If you build a Tree Notation library/SDK in another language, let us know and we'll add a link.

* If you are working on a Tree Notation library in a new host language, feel free to post an issue or ask for help in the  TreeNotation subreddit.
 https://reddit.com/r/treenotation subreddit

## How to bump versions

code
 npm run updateVersion NEW_NUMBER

# Alternatives Considered

* This is the first Tree Notation library in existence, so there were no alternative implementations. Note and Space were predecessors to Tree Notation.

* If a better alternative low level notation to Tree Notation is possible, it has yet to be discovered.

* All that said, the important part of this repo is not the code but the design patterns. Tree Notation is very simple, and you can implement the patterns contained here in your own code without using this library. In fact, that is often the best way to use Tree Notation!

## Editing in Sublime Text

* It is helpful to set `"goto_anything_exclude_gitignore": true` to ignore files in gitignore. Read more here.
 https://breckyunits.com/code/my-sublime-setttings.html here

html
 <link rel="shortcut icon" type="image/x-icon" href="/images/favicon.ico" />

section ❤️ Public Domain ❤️
permalink index.html
import settings.scroll
